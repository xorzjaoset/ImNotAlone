<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hoFirst">


	<!-- 회원 이메일 일치 여부 -->
	<select id="checkUserEmailForLogin" resultType="String" parameterType="String">
		select user_password from member_t where user_email = #{user_email}  
	</select>
	<!-- 회원 패스워드 일치 여부 -->
	<select id="checkUserForLogin" resultType="ho.dto.MemberDTO" parameterType="String">
		select user_password from member_t where user_email = #{user_email}
	</select>
	<!-- 회원 정보 가지고 오기 -->
	<select id="getUserInformation" resultType="ho.dto.MemberDTO" parameterType="ho.dto.MemberDTO">
		select * from member_t where user_email = #{user_email}
	</select>


	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="ho.dto.MemberDTO">
		insert into member_t values(#{user_id}, #{user_password}, #{user_name}, #{user_email}, sysdate)
	</insert>



	<!-- 방스타 sql -->
	<insert id="insertBstContents" parameterType="ho.dto.RoomStarDTO">
		insert into bst_t (user_id, bst_board_no, bst_title, bst_contents, bst_board_date, bst_type_of, bst_like, bst_view)
		values(#{user_id}, bst_t_num.nextval, #{bst_title}, #{bst_contents}, sysdate, #{bst_type_of}, #{bst_like}, #{bst_view} )
	</insert>
	<!-- 체크 방번호 -->
	<select id="checkBstNo" resultType="ho.dto.RoomStarDTO" parameterType="ho.dto.RoomStarDTO">
		select bst_board_no from bst_t where user_id = #{user_id} order by bst_board_no desc
	</select>
	<!-- 이미지 업로드 -->
	<insert id="uploadBstImg" parameterType="ho.dto.RoomStarDTO">
		insert into bst_img_t values(#{user_id}, #{bst_board_no}, bst_img_t_num.nextval,#{bst_img_path},#{bst_img_oname},#{bst_img_sname},#{bst_img_size})
	</insert>
	

	<!-- 방스타 컨테츠 리스트 -->	
	<select id="getListContents" parameterType="ho.vo.PageVO" resultType="ho.dto.RoomStarDTO">
		select * from (
	    select rownum r ,bst_board_no, user_id, bst_title, bst_type_of, bst_board_date, bst_img_no, bst_contents, bst_img_sname  from 
	    (select bst_board_no, num, user_id, bst_title, bst_img_no, bst_contents, bst_img_sname, bst_type_of, bst_board_date from(
	    select b.BST_BOARD_NO as bst_board_no, b.bst_img_no as bst_img_no, row_number() 
		over(partition by b.BST_board_NO order by b.bst_img_no asc) num, b.BST_IMG_PATH as bst_img_path, a.user_id as user_id, b.bst_img_sname as bst_img_sname,
		a.bst_title as bst_title, a.bst_contents as bst_contents, a.bst_board_date as bst_board_date, a.bst_like as bst_like, a.bst_type_of as bst_type_of
		from bst_t a, bst_img_t b where a.BST_BOARD_NO = b.BST_BOARD_NO order by a.bst_board_no desc)) where num =1) where r between #{startRowNum} and #{endRowNum}  
	</select> 
	 
	 <select id="getContentBoard" parameterType="ho.dto.RoomStarDTO" resultType="ho.dto.RoomStarDTO">
	 	select*from bst_t where bst_board_no = #{bst_board_no}
	 </select>

	 <select id="getContentImages" parameterType="ho.dto.RoomStarDTO" resultType="ho.dto.RoomStarDTO">
	 	select bst_img_sname from bst_img_t where bst_board_no = #{bst_board_no}
	 </select>
	 <update id="updateBstView" parameterType="ho.dto.RoomStarDTO" >
		update bst_t set bst_view = #{bst_view}+1 where bst_board_no = #{bst_board_no}
	 </update>
	 
	 
	 
	 <!-- 댓글 등록 및 리스트 -->
	<select id="getBstCountList" resultType="int">
		select count(*) from bst_T
	</select>
	
	<select id="getComment" parameterType="ho.dto.CommentDTO" resultType="ho.dto.CommentDTO">
		select*from dg_t where #{bst_board_no} = #{dg_comment_no}
	</select>
	
	<insert id="insertComment" parameterType="ho.dto.CommentDTO">
		insert into dg_t values(#{bst_by_id}, #{bst_board_no}, dg_t_num.nextval, #{dg_comment}, #{dg_by_id}, #{dg_board_date})
	</insert>

	<select id="getCommentList" resultType="ho.dto.CommentDTO" parameterType="ho.dto.CommentDTO">
		select*from dg_t where bst_board_no = #{bst_board_no}
	</select>





	<!-- 위시리스트 -->
	<select id="getWishNum" resultType="int">
		select bst_board_no from wish_t where user_id = #{user_id}
	</select>
	
	
	
	<select id="getWishList" resultType="ho.dto.RoomStarDTO" >
		select * from (
	    select rownum r ,bst_board_no, user_id, bst_title, bst_type_of, bst_board_date, bst_img_no, bst_contents, bst_img_sname  from 
	    (select bst_board_no, num, user_id, bst_title, bst_img_no, bst_contents, bst_img_sname, bst_type_of, bst_board_date from(
	    select b.BST_BOARD_NO as bst_board_no, b.bst_img_no as bst_img_no, row_number() 
		over(partition by b.BST_board_NO order by b.bst_img_no asc) num, b.BST_IMG_PATH as bst_img_path, a.user_id as user_id, b.bst_img_sname as bst_img_sname,
		a.bst_title as bst_title, a.bst_contents as bst_contents, a.bst_board_date as bst_board_date, a.bst_like as bst_like, a.bst_type_of as bst_type_of
		from bst_t a, bst_img_t b where a.BST_BOARD_NO = b.BST_BOARD_NO order by a.bst_board_no desc)) where num =1)where bst_board_no in
		
				 <foreach item="item" collection="list" open="(" separator="," close=")">
					 #{item}
				 </foreach>
	</select>
	
	<select id="getWishListCheck" resultType="ho.dto.WishListDTO" parameterType="String">
		select*from wish_t where user_id = #{user_id}
	</select>
	
	
	<insert id="addWishList" parameterType="ho.dto.WishListDTO">
		insert into wish_t values(#{user_id}, #{bst_board_no}, #{wish_date})
	</insert>
	<insert id="oddWishList" parameterType="ho.dto.WishListDTO">
		delete from wish_t where bst_board_no = #{bst_board_no} and user_id = #{user_id}
	</insert>


	<!-- 위시리스트 카운트 -->
	<select id="getWishListCount" parameterType="String" resultType="int">
		select count(*) from wish_t where user_id = #{user_id}
	</select>
	
	
	<!-- 누가 좋아요를 했는지 리스트 가지고오기 -->
	<select id="getLikePeopleByMyRoom" parameterType="int" resultType="ho.dto.WishListDTO">
		select user_id from wish_t where bst_board_no = #{bst_board_no}	
	</select>
	
	<!-- 좋아요 카운트 가지고 오기 -->
	<select id="getLikeCount" parameterType="int" resultType="int">
		select count(*) from wish_t where bst_board_no = #{bst_board_no}
	</select>	
	


</mapper>